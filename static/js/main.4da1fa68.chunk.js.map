{"version":3,"sources":["weather.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","state","zipcode","city","time","temprature","icon","description","message","handleChange","bind","handleSubmit","e","this","setState","target","value","preventDefault","length","isNaN","weatherApi","fetch","response","json","result","name","main","temp","weather","lon","coord","lat","timeApi","response2","result2","formatted","K","toPrecision","className","onSubmit","placeholder","onChange","format","id","src","alt","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"ySAmGeA,G,wDA/Fb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAQ,GACRC,KAAK,GACLC,KAAK,GACLC,WAAW,GACXC,KAAK,GACLC,YAAY,GACZC,QAAQ,IAGV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAbH,E,yDAeNE,GACXC,KAAKC,SAAS,CAACZ,QAASU,EAAEG,OAAOC,U,4EAEhBJ,G,0FACjBA,EAAEK,iBAEmB,KADff,EAAUW,KAAKZ,MAAMC,SACfgB,SAA+B,IAAjBC,MAAMjB,G,wBAC9BW,KAAKC,SAAS,CAACN,QAAQ,KACF,mCACfY,EAAa,sDAAsDlB,EAAtD,4D,SACKmB,MAAMD,G,cAAxBE,E,iBACgBA,EAASC,O,eAAzBC,E,OACNX,KAAKC,SAAS,CACVX,KAAKqB,EAAOC,KACZpB,WAAYmB,EAAOE,KAAKC,KAAM,SAC9BpB,YAAaiB,EAAOI,QAAQ,GAAGrB,YAC/BD,KAAKkB,EAAOI,QAAQ,GAAGtB,OACrBuB,EAAML,EAAOM,MAAMD,IACnBE,EAAMP,EAAOM,MAAMC,IACR,eACXC,EAAU,6FAA+FD,EAAI,QAAQF,E,UAClGR,MAAMW,G,eAAzBC,E,iBACiBA,EAAUV,O,QAA3BW,E,OACNrB,KAAKC,SAAS,CAACV,KAAM8B,EAAQC,Y,wBAG7BtB,KAAKC,SACH,CACEZ,QAAQ,GACRC,KAAK,GACLC,KAAK,GACLC,WAAW,GACXC,KAAK,GACLC,YAAY,GACZC,QAAQ,oC,iJAMG4B,GAEf,OADmB,KAAbA,EAAI,QAAkB,IACnBC,YAAY,K,+BAGvB,OACE,yBAAKC,UAAU,cACb,yBAAKA,UAAU,SACd,2DAEA,yBAAKA,UAAU,aACd,0BAAMC,SAAU1B,KAAKF,cACjB,2BAAO6B,YAAc,UAAUC,SAAU5B,KAAKJ,eAC9C,0CACA,4BACA,2BAAII,KAAKZ,MAAMO,SACf,2BAAIK,KAAKZ,MAAME,MACM,KAApBU,KAAKZ,MAAMG,MACV,2BACG,kBAAC,IAAD,CAAQsC,OAAO,OAAO7B,KAAKZ,MAAMG,OAGtC,2BAAOuC,GAAG,SACV,4BACE,4BAAI,yBAAKC,IAAK,qCAAsC/B,KAAKZ,MAAMK,KAAK,OAAQuC,IAAI,MAChF,wBAAIF,GAAG,QAAQ9B,KAAKZ,MAAMI,cAG5B,2BAAIQ,KAAKZ,MAAMM,oB,GApFPuC,IAAMC,YCWbC,MAVf,WACE,OACE,4BAAQV,UAAU,cAChB,yBAAKA,UAAU,MAAMK,GAAI,OACrB,kBAAC,EAAD,SCIUM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM1D,c","file":"static/js/main.4da1fa68.chunk.js","sourcesContent":["import React from 'react';\r\nimport Moment from 'react-moment';\r\nimport 'moment-timezone';\r\nclass Weather extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      zipcode:\"\",\r\n      city:\"\",\r\n      time:\"\",\r\n      temprature:\"\",\r\n      icon:\"\",\r\n      description:\"\",\r\n      message:\"\"\r\n\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  handleChange(e) {\r\n    this.setState({zipcode: e.target.value });\r\n  }\r\n  async handleSubmit(e) {\r\n    e.preventDefault();\r\n    const zipcode = this.state.zipcode; \r\n    if (zipcode.length===5 && isNaN(zipcode)===false ){\r\n      this.setState({message:\"\"})\r\n      const weathereApikey=\"34c9a261402ccf438cebedb1dee0a341\"\r\n      const weatherApi = \"http://api.openweathermap.org/data/2.5/weather?zip=\"+zipcode+\",us&appid=\"+weathereApikey+\"&units=imperial\";\r\n      const response =  await fetch(weatherApi)\r\n      const result =  await response.json();\r\n      this.setState({\r\n          city:result.name,\r\n          temprature: result.main.temp+ \" \\xB0F\",\r\n          description: result.weather[0].description,\r\n          icon:result.weather[0].icon})   \r\n      const lon = result.coord.lon;\r\n      const lat = result.coord.lat;\r\n      const timeApiKey=\"3HCA50JZWG8Q\"\r\n      const timeApi = \"http://api.timezonedb.com/v2.1/get-time-zone?key=\"+timeApiKey+\"&format=json&by=position&lat=\"+lat+\"&lng=\"+lon\r\n      const response2 =  await fetch(timeApi)\r\n      const result2 =  await response2.json();\r\n      this.setState({time: result2.formatted})\r\n    }\r\n    else{\r\n      this.setState(\r\n        {\r\n          zipcode:\"\",\r\n          city:\"\",\r\n          time:\"\",\r\n          temprature:\"\",\r\n          icon:\"\",\r\n          description:\"\",\r\n          message:\"Please insert a correct zipcode\"\r\n        }\r\n      )\r\n     \r\n    }\r\n  }\r\n  convertToFahranite(K){\r\n    var F =(K - 273.15)* 1.8000 + 32.00\r\n      return F.toPrecision(2)\r\n  }\r\n  render() { \r\n    return (\r\n      <div className=\"weatherApp\">\r\n        <div className=\"title\">\r\n         <h1>What is the weather today?</h1>\r\n         </div> \r\n         <div className=\"inputForm\">\r\n          <form onSubmit={this.handleSubmit}>\r\n              <input placeholder = \"Zipcode\" onChange={this.handleChange}/>\r\n              <button>Search</button>\r\n              <p></p>\r\n              <p>{this.state.message}</p>\r\n              <p>{this.state.city}</p>\r\n              {this.state.time !== \"\" &&(\r\n                <p>\r\n                   <Moment format=\"LLL\">{this.state.time}</Moment>\r\n                </p>)\r\n              }\r\n              <table id=\"table\">\r\n              <tr >\r\n                <td><img src={\"https://openweathermap.org/img/wn/\"+ this.state.icon+\".png\"} alt=''/></td>\r\n                <td id=\"temp\">{this.state.temprature}</td>\r\n              </tr>\r\n              </table>\r\n              <p>{this.state.description}</p>\r\n             \r\n          </form>\r\n          </div> \r\n        </div>\r\n      );\r\n  }\r\n\r\n  \r\n}\r\n\r\n\r\nexport default Weather;\r\n\r\n\r\n     ","import React from 'react';\n// import './App.css';\nimport Weather from './weather.js'\n\nfunction App() {\n  return (\n    <header className=\"app-header\">\n      <div className=\"App\" id =\"App\">\n          <Weather/>\n      </div>\n    </header>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}